name: iOS unsigned IPA (bulletproof-fallback)
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Пинним стабильную версию Flutter под macOS arm64
      - name: Install Flutter (3.35.0 stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.0'
          channel: stable
          cache: true

      - name: Disable analytics & show versions
        run: |
          flutter config --no-analytics
          flutter --version
          dart --version
          xcodebuild -version || true
          sw_vers

      # Создаём ios/android каталоги с валидным именем проекта
      - name: Ensure iOS/Android scaffolding
        run: flutter create --project-name my_first_time .

      - name: Patch Info.plist & bundle id
        run: |
          set -e
          PLIST="ios/Runner/Info.plist"
          /usr/libexec/PlistBuddy -c 'Add :NSMicrophoneUsageDescription string "Analyze pet sounds on-device."' "$PLIST" || true
          /usr/libexec/PlistBuddy -c 'Add :NSCameraUsageDescription string "Analyze pet facial expressions on-device."' "$PLIST" || true
          /usr/libexec/PlistBuddy -c 'Add :UIBackgroundModes array' "$PLIST" || true
          /usr/libexec/PlistBuddy -c 'Add :UIBackgroundModes:0 string audio' "$PLIST" || true
          sed -i.bak -E 's/PRODUCT_BUNDLE_IDENTIFIER = [^;]+;/PRODUCT_BUNDLE_IDENTIFIER = com.petmood.radar;/g' ios/Runner.xcodeproj/project.pbxproj || true

      - name: Set iOS deployment target = 13.0 in Podfile
        run: |
          set -e
          PODFILE="ios/Podfile"
          if grep -qE "^platform :ios" "$PODFILE"; then
            sed -i.bak -E "s/^platform :ios, '[0-9.]+'$/platform :ios, '13.0'/" "$PODFILE" || true
          else
            sed -i.bak "1i platform :ios, '13.0'" "$PODFILE" || true
          fi
          if ! grep -q "post_install do |installer|" "$PODFILE"; then
            cat >> "$PODFILE" <<'POST'

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
              end
            end
          end
          POST
          fi

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -N
          pod --version

      - name: Flutter pub get
        run: flutter pub get

      - name: Generate app icons (non-fatal)
        run: flutter pub run flutter_launcher_icons || true

      - name: CocoaPods install (retry-friendly)
        working-directory: ios
        shell: bash
        run: |
          set -e
          tries=0
          until [ $tries -ge 3 ]; do
            pod repo update && pod install && break
            tries=$((tries+1))
            echo "Retry $tries in 20s..."
            sleep 20
          done
          pod install

      - name: Clean build
        run: flutter clean

      # 1) Пытаемся собрать готовый .ipa
      - name: Build unsigned IPA (Flutter)
        run: flutter build ipa --release --no-codesign || true

      # 2) Если .ipa не появился — fallback: собрать .app и упаковать вручную
      - name: Fallback package .app -> .ipa (if needed)
        shell: bash
        run: |
          set -e
          if ls build/ios/ipa/*.ipa 1> /dev/null 2>&1; then
            echo "IPA already exists — fallback not needed."
            exit 0
          fi
          echo "No IPA in build/ios/ipa — building .app then packaging manually..."
          flutter build ios --release --no-codesign
          APP_PATH=$(find build/ios -type d -name "Runner.app" | head -n 1 || true)
          if [ -z "$APP_PATH" ]; then
            # альтернативный путь Flutter
            if [ -d "build/ios/iphoneos/Runner.app" ]; then
              APP_PATH="build/ios/iphoneos/Runner.app"
            fi
          fi
          if [ -z "$APP_PATH" ]; then
            echo "Runner.app not found — abort."
            exit 1
          fi
          rm -rf Payload
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/Runner.app
          zip -qry PetMoodRadar-unsigned.ipa Payload
          echo "Manual IPA created at $(pwd)/PetMoodRadar-unsigned.ipa"

      # 3) Находим реальный путь IPA и загружаем артефакт
      - name: Find IPA path
        id: findipa
        shell: bash
        run: |
          set -e
          IPA=$(ls -1 build/ios/ipa/*.ipa 2>/dev/null || true)
          if [ -z "$IPA" ] && [ -f "PetMoodRadar-unsigned.ipa" ]; then
            IPA="PetMoodRadar-unsigned.ipa"
          fi
          if [ -z "$IPA" ]; then
            echo "No IPA found"; exit 1
          fi
          echo "ipa=$IPA" >> $GITHUB_OUTPUT
          echo "Found IPA: $IPA"

      - name: Upload artifact (.ipa)
        uses: actions/upload-artifact@v4
        with:
          name: PetMoodRadar-unsigned-ipa
          path: ${{ steps.findipa.outputs.ipa }}
